{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/32.jpg","path":"images/32.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/mzj.jpg","path":"images/mzj.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/zhifubao.jpg","path":"images/zhifubao.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/C++的进阶语法(仅语法层面).md","hash":"41618ed7f99652e40c5849deaf89f2f612eff055","modified":1750014032696},{"_id":"source/_posts/C-C-const与static关键字.md","hash":"a7488fb427e064e37325e2dab6167fd9c1fc0ebb","modified":1750015679544},{"_id":"source/_posts/hello-world.md","hash":"9f89f294d59b394a8b88294116c4b5888546b2ae","modified":1750014193335},{"_id":"source/_posts/我和《长汀往事》.md","hash":"fa479ec82f9d0748b7e47812e20c2b728f5def5c","modified":1750013576399},{"_id":"source/_posts/技术面.md","hash":"a66c282a16ffd33a4182ea874685dedd78e575f2","modified":1750013133047},{"_id":"source/_posts/测试.md","hash":"0f8a6023e8936f9b4acfea4bf0fd6f02620c5b82","modified":1750013764886},{"_id":"source/_posts/算法题：找出最长回文子串.md","hash":"01d53fc718919e43f1a80f88c6502153a7259670","modified":1750013776574},{"_id":"source/_posts/重回有感.md","hash":"8c7994a53afe601dff550c7315658044a5e644d7","modified":1750016738609},{"_id":"source/categories/index.md","hash":"3e8dbe8fb802d2ef0228926254757d9d265e58bc","modified":1750011918415},{"_id":"source/home/index.md","hash":"6b94790aa64eef3741a141f48404da60f4392451","modified":1750012327320},{"_id":"source/tags/index.md","hash":"a44f9780bdb6bf78a47429289e1655014668cf6b","modified":1750011918419},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1750011918519},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1750011918523},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1750011918519},{"_id":"themes/next/.stylelintrc","hash":"20f46858e47aba6b3fc47e9b43e9f7531fa66e33","modified":1750011918519},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1750011918519},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1750011918523},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1750011918523},{"_id":"themes/next/README.md","hash":"c927b1826bc70a705f35b065f4d4c21aa8d5f17b","modified":1750011918523},{"_id":"themes/next/package.json","hash":"f1d7063a2e6ecbc29424752c7721b2391743e17a","modified":1750011918523},{"_id":"themes/next/_vendors.yml","hash":"63da5ac3feb0faf40b9fde49426edce6d60497c2","modified":1750011918523},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1750011918523},{"_id":"themes/next/.githooks/install.js","hash":"72757c6827909a5f2c217ddbbdf6034ca6fab74a","modified":1750011932715},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1750011932715},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"82a3d202da8fe6ce765715bd5b7571676e90364d","modified":1750011932715},{"_id":"themes/next/_config.yml","hash":"84ddb77f61131ac7414284770e5be2e63d28a3d7","modified":1750015960510},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1750011932715},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1750011932715},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"009b397b686bba7b63885da59d904144ff59b24e","modified":1750011932719},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1750011932715},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"c8cfbe7cec995ccb45be8a39f4546bf4978fb3a3","modified":1750011932719},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1750011932715},{"_id":"themes/next/.github/release.yml","hash":"83b4dae3f8d76619e208d2110a247b3ccadd64d8","modified":1750011932715},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1750011932823},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1750011932823},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1750011932919},{"_id":"themes/next/languages/ar.yml","hash":"c77fc13e0431e71eeb0f767a0a436284fc81df90","modified":1750011932823},{"_id":"themes/next/languages/bn.yml","hash":"30ffd43588ddf2cd39432d964087242e1c3e5407","modified":1750011932823},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1750011932823},{"_id":"themes/next/languages/de.yml","hash":"5101612f7cac38884206d28319532f1aab32fbe6","modified":1750011932823},{"_id":"themes/next/languages/en.yml","hash":"5ca2c0b3c95dd87485f2d2b3477f88810ad1a63b","modified":1750011932823},{"_id":"themes/next/languages/eo.yml","hash":"7bd0124c2d1dcdbfde350fce335e130556ebcee8","modified":1750011932823},{"_id":"themes/next/languages/fa.yml","hash":"cc6ef3144b954daa29ce7d42f08191eafe052fab","modified":1750011932823},{"_id":"themes/next/languages/es.yml","hash":"31c2a47d14cd5b804cae0c0b44d43bece069d3aa","modified":1750011932823},{"_id":"themes/next/languages/fr.yml","hash":"3a7469446f77e5d1a12eee828ebc49ecb43b6c35","modified":1750011932915},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1750011932719},{"_id":"themes/next/languages/id.yml","hash":"bd2c30def05a37c66653900ca07952d52a142961","modified":1750011932915},{"_id":"themes/next/languages/ja.yml","hash":"e660ec12b9eade103492aba7aa9b23ef06d353a9","modified":1750011932915},{"_id":"themes/next/languages/it.yml","hash":"4969c4f17d88003135218de72ddf0bf8d894dc07","modified":1750011932915},{"_id":"themes/next/languages/nl.yml","hash":"4575f93c4ee4383bdfaca01ad6ffff5664cbbbae","modified":1750011932915},{"_id":"themes/next/languages/pt-BR.yml","hash":"ff9aa6a6549d07b7dc667094f34a06945e2c21b4","modified":1750011932915},{"_id":"themes/next/languages/ko.yml","hash":"04927e331652ee13f9c8a110fe12d7f936a6b0e6","modified":1750011932915},{"_id":"themes/next/languages/pt.yml","hash":"1fa9f4f4f208191afd0e6108ce89d91c657a6bd0","modified":1750011932915},{"_id":"themes/next/languages/si.yml","hash":"07f98d6ca99bceef35254c60fc0e4401ff608557","modified":1750011932919},{"_id":"themes/next/languages/ru.yml","hash":"d726265bc5cf8bd4fb64f85b2d07b3326439bb00","modified":1750011932915},{"_id":"themes/next/languages/tk.yml","hash":"7b9115e0520dc81a95a7c8e4f56a01fc84f74017","modified":1750011932923},{"_id":"themes/next/languages/th.yml","hash":"dc434da945d52dc7a8d26acc80b23e6922712f89","modified":1750011932919},{"_id":"themes/next/languages/uk.yml","hash":"10a2f2e7183410d1d10fa937e3e0198b46bf4930","modified":1750011932923},{"_id":"themes/next/languages/vi.yml","hash":"8344cb90ee92a21a398faff3317c025a43446db5","modified":1750011932923},{"_id":"themes/next/languages/tr.yml","hash":"822ec400a0a2bb2245abf31e9ed4f3af77b2814e","modified":1750011932923},{"_id":"themes/next/languages/zh-CN.yml","hash":"c06c95121b3e5bd5abe01848073fbe7f9d6dcda9","modified":1750011932927},{"_id":"themes/next/languages/zh-HK.yml","hash":"6cfdc633870b814f3d75438e86f6ee5dba068987","modified":1750011932927},{"_id":"themes/next/languages/zh-TW.yml","hash":"198e3745b99ba5a2b75cc24d03f3412e272b7fa1","modified":1750011932923},{"_id":"themes/next/layout/_layout.njk","hash":"5b4bb28c2da5f29f96fe8ce18ea968c15cce016b","modified":1750011932927},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1750011932927},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1750011932927},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1750011932927},{"_id":"themes/next/layout/post.njk","hash":"6767de9702a07a2a4e16a8a6bc9c5919536c1e3f","modified":1750011933015},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1750011932927},{"_id":"themes/next/layout/page.njk","hash":"6d2f7e7cd9fe868e96765b82d17df49081379e27","modified":1750011933015},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1750011932927},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1750011949715},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1750011949715},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1750011949719},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1750011949715},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"1e4e4a7ea522b76d6fc5947ddd07260f9fecbcf4","modified":1750011949715},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"cd3432077a6375c0b9395abd8bf05e4909803605","modified":1750011949715},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8d27e597d8fb04818a84fc405a7e818a221e2f78","modified":1750011949719},{"_id":"themes/next/.github/workflows/lock.yml","hash":"ea346568ab811fea4dacc69081af2d6177b5aafb","modified":1750011949815},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dda18899fe62652c633f60c300a93df18f58862f","modified":1750011949719},{"_id":"themes/next/.github/workflows/linter.yml","hash":"74ecdd99cc20a8f5103579210353de33536aa45c","modified":1750011949719},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"e077bebf4fb89b159b840b30f0230b95ff7db8a5","modified":1750011949719},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"33d771e7c88031dd071186cbe2196a0924ba77f0","modified":1750011949819},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1750011949815},{"_id":"themes/next/layout/_macro/post.njk","hash":"8f7eaba7c3416a64d61e5bc7547645fc1c058b2a","modified":1750011949819},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"b9fc0a6b02f0380de939d1ea2a7c7d2e6be9f462","modified":1750011949819},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1750011949819},{"_id":"themes/next/docs/zh-CN/README.md","hash":"3d1d53536269046c379c1bb75fa31b56ba530e3b","modified":1750011949819},{"_id":"themes/next/layout/_partials/footer.njk","hash":"2b0721ce3d6bbfa727d7a4abf8d7d8d9eb6d0b10","modified":1750011949819},{"_id":"themes/next/docs/ru/README.md","hash":"743bed1823f55878a6e5772e39745737fd0eff3d","modified":1750011949719},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1750011949819},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"c55167bc0dbe7e104d4f4d782e98fcabc7e07a35","modified":1750011949819},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"9ef81adb0c35ebdb4499602155e87611aee0762a","modified":1750011949819},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1750011949819},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1750011949819},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"9471c4f3aeee101b9b9a8c2aae7d21ec7277574e","modified":1750011949819},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1750011949919},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1750011949919},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1750011949919},{"_id":"themes/next/layout/_third-party/index.njk","hash":"9bab629e2971b029545511b48f397445858ac7f0","modified":1750011949919},{"_id":"themes/next/scripts/events/index.js","hash":"8ae618d4436dab49928c2bebc0837e5310dbe7de","modified":1750011949911},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1750011949923},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1750011949923},{"_id":"themes/next/scripts/filters/post.js","hash":"e6cf4c94fc2291215a3345134ddbbc74d5091b00","modified":1750011949923},{"_id":"themes/next/scripts/filters/minify.js","hash":"32061a93a44a545518bb888db4438baf27e2b531","modified":1750011949923},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1750011949919},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1750011949919},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1750011949919},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"9fb14a35082b3171d558ca44776d59df64f4fe95","modified":1750011949919},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"ceff5e76564a5d6ed3e0222bccf581e106d80f3c","modified":1750011949923},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"2e8dcc12a52517bb4e00ea611720bcd298624112","modified":1750011949919},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"42c295f764f12ade0a91378d00249374a12c7309","modified":1750011949923},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1750011949923},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1750011949923},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1750011949923},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1750011949923},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1750011949931},{"_id":"themes/next/scripts/tags/index.js","hash":"1a680bb01e14152905efe3ef624621dd74cf27c3","modified":1750011949923},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1750011949931},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1750011949931},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1750011949931},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1750011949931},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1750011949931},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"188c1dd5d7dbc566cac00946da86aa76fff1c682","modified":1750011949931},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1750011949931},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1750011949931},{"_id":"themes/next/source/css/main.styl","hash":"c326550ce8b4deaa9b647bcfe3cdc04c100644e6","modified":1750011949931},{"_id":"themes/next/source/css/noscript.styl","hash":"64b378a4d2f0b36bf666fba13b57c59da3a8ac83","modified":1750011949931},{"_id":"themes/next/source/css/_mixins.styl","hash":"eacfdd1795ccc0138e194fbf9381d3a64b5ba130","modified":1750011949931},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1750011949931},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1750011949931},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1750011949931},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1750011949931},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1750011949935},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1750011949935},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1750011950015},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1750011950015},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1750011950015},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1750011950019},{"_id":"themes/next/source/js/motion.js","hash":"d4c01d5317d45444e91a52236b751c9e9ab1bc16","modified":1750011950019},{"_id":"themes/next/source/js/next-boot.js","hash":"8759690669651d76d6eeca6e2a0f79aa898fc03c","modified":1750011950019},{"_id":"themes/next/source/js/pjax.js","hash":"c999bfc7cad747e3da0fe3d75c31dd933bf63016","modified":1750011950019},{"_id":"themes/next/source/js/utils.js","hash":"901d99cb8c45ff194971124e244e6a14e879134c","modified":1750011950119},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1750011950023},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1750011949935},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1750011949935},{"_id":"themes/next/test/helpers/next-url.js","hash":"ea379af44770c2b32263839d4b5394065a15fd4b","modified":1750011949935},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1750011950211},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1750011950215},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1750011950211},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1750011950215},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1750011950215},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1750011950215},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1750011950215},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1750011950215},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1750011950215},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1750011950219},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1750011950215},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1750011950215},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1750011956431},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"e016c3f80db433f17781caf26e44f2089a71550a","modified":1750011956511},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1750011950023},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"7bf2b6ab499775355bbf8f3ae597ff7bc00e89e4","modified":1750011956511},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1750011956511},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1750011956515},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1750011956515},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1750011956519},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1750011956519},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1750011956519},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1750011956519},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1750011956519},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1750011956519},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"22c922214982c4bb78ea92fa2ff1de93d98216a3","modified":1750011956519},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebe45ab38ace03ea74eed3f676ec1cb5805a3c8a","modified":1750011956519},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"9a7eda45ad0753d5f624c51a56e00277ba97c93d","modified":1750011956519},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"fd6fde597ea2fb7b80cffd0a3553c8e73acb8ab2","modified":1750011956523},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1750011956519},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"8a6414987474592e82b3e57eeb0bd526ae42d235","modified":1750011956527},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1750011956527},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1750011956539},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"8d76300e31178e790400a37adfaf9bc0e5f8fae7","modified":1750011956543},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1750011956539},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1750011956543},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1750011956543},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1750011956543},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1750011956543},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"81abcf790cf97395cde9e3cd6d5d1aa5656bd134","modified":1750011956543},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1750011956615},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"43238bc1bc2e88d707f8097814ef3ff830cbe641","modified":1750011956543},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"64ed6fecae79f9f9c61e956d2bd077792473e069","modified":1750011956543},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"c8b8c10dcf5c4ffa4a8aec5ba5892842ec204ac0","modified":1750011956543},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1750011956619},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1750011956543},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1750011956619},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1750011956619},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1750011956619},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1750011956619},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1750011956619},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1750011956619},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1750011956619},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1750011956619},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1750011956711},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1750011956811},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1750011956711},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1750011956815},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1750011956815},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1750011956815},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1750011956815},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1750011956815},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1750011956815},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1750011956815},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"baec18165d767094ecb2dda7141ca3bd8c6f2eb9","modified":1750011956819},{"_id":"themes/next/scripts/events/lib/config.js","hash":"7c29184a37222d6499c5220264fda6942afc03a9","modified":1750011956527},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1750011956527},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1750011956527},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1750011956527},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"c2f9b18d2958329d5f124d9ad3fea21a326e106c","modified":1750011956527},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"761760031e49edb77277bd4a8582774959240d6b","modified":1750011956711},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"48fed05ba4efffeeb1aaed2190ae6e7d0ea04e99","modified":1750011956527},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1750011956711},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1750011956715},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"4dbe9652ae53a181c86eb7e9005a5255f0540055","modified":1750011956715},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1750011956715},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1750011956715},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1750011956811},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1750011956811},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1750011956819},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1750011956811},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5092cacdfbc482996d0bee9fdf2c37d8d3ae863c","modified":1750011956823},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"77d9c468897283223cdc922eb7e146ca7a83420c","modified":1750011956823},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1750011956823},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5cff12a5c9fc55a68f0f57a291494cd738301ba4","modified":1750011956823},{"_id":"themes/next/source/js/schemes/muse.js","hash":"aa84bdd853a9b0646ad9157e26df949ba0ec57c3","modified":1750011956823},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"e3022c2ea60409a82a3e2a0d3615e4a25c684551","modified":1750011956911},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1750011956823},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c8b101c76b179877a22256922a56d30d0926bc51","modified":1750011956823},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"db9e807cc8531ee0052f7cdf6a4cb92a8add3fd2","modified":1750011960023},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"969c3797d4315a2873aa143d0674d251fa0c5703","modified":1750011960023},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1750011956911},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1750011960023},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"49c3063b46d65796003a822deed971abee41675e","modified":1750011960023},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1750011960023},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1750011960023},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1750011960023},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1750011960023},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1750011960023},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1750011960023},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"aa34abe71ad476922a0371bcac82cd8e5b45d383","modified":1750011960023},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1750011960023},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"fd4a2d2303f107a021837aa6e3d977c2f9d14c42","modified":1750011960023},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"be9d0e9493802c22f16a0645a59d0c2b556c1c3c","modified":1750011960023},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"2db5ada757f7ffb9a36b06400cf30d80ec039b6e","modified":1750011960023},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e728caca94567b4d4215402d01e449e23969e7e1","modified":1750011960023},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1750011960215},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"68f8d30071516913a7a958e01d010e8a93f7aa24","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1750011960023},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"2f19fe2aba8f63fc99641e50bcb96cc9a4feb8a4","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"06835446a1c7353f434a9527889a53d6be69766c","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"e6e8892fccb02bff163d9b574984e0440a00d756","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8b21da21dd1f34505875619bfd355ba1f826d7a7","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"6630a642ad2311ec09466c962963c006c4df4c38","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5393f045f12b1eb9373c421627727f40f5b148e7","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1750011960219},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e06e0fd44e39838ce22ac7829a2421f8c9e1b12d","modified":1750011960219},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1750011960219},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1750011960219},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1750011960219},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1750011960223},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"f24604710002234f18a7b5cfe9ccdf3ed6e725a8","modified":1750011960219},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1750011960219},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"07e0038b221b9a4fd8ccac75093de3dee1f8315e","modified":1750011960223},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1750011960223},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1750011960223},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"5673d28509a8e837a512da490a88b7bf5162fc49","modified":1750011960223},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1750011960227},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1750011960227},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1750011960227},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1750011960227},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1750011960227},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1750011960227},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"ce12b5007c9aa997738641c06a1c081c357e27bd","modified":1750011960315},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1750011960227},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"99bb6c073842873d4a4da6fadb0d2a1f70864a35","modified":1750011960227},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"7db3233f0b33870943ce1547326a67f9e628b411","modified":1750011960315},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1750011960227},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1750011960991},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"9cafc8f751581d496f1f3c056b95f3b8e1ebbf4e","modified":1750011960227},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"aa04527f76de7646573ea327d4f6145200d6070d","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"6d8827b14ea1af16bfa21e194006ba9fa10ce50b","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ffcaf94d0de9e7292c320225541d5550d4f0ba56","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"4790d37a40b80f7278ec55274f017dad21791038","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"7245d8364092c2d184e658e801ba94815a2a1f81","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d514d09525256d510c83829aa6895bb40678d576","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"777efaacbabb623f1d77fac5dd784401f8dea4cd","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a698c3adba896a46e26850967cb73295c521940","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"406c03be3cf8a8411227bc1fecf942ca368f7e2a","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"a2ffaa06c963514a79fda52665e707af6e8e2f5e","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"8a7b70ef14c7110aaceb30ea2f7eb4b202f0f0cd","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1750011960991},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"39066b4e2e914d85736c9c33fa51f21a3f86c0e4","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"dd84ccb5a6b8e79b0cbdd1d7ea8e4fca8d2cc97c","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"038625515ba4760e4dda6792549bddc0db5a3d20","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"dce8ea62d7d7b08a0444fbb2f617be30bfcfc152","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"bdfef8d2363bc199dfbcc23ee833edca27cc9fcf","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"63fb6d36d9ea62c7e39274c666e102b12f64ff77","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b3689beb90cda64cafecaf6b25981fe8a9525992","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"f8a97aad14e0b16b555ee0048da5402f818f9693","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"f5c1a6afcd2d460ccd5987ef1af747fc99d3ea72","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"cbc6b0938a2e60f35a5df32210904fb16e4938da","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"8f82d5141a18f6319e0609a3f6e4fcca6d442203","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1750011960991},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"509bad7d1d6b5c6f24a3f205b2ed7b65a2326dd4","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"98a233884b1953952b8364895617fe53def60038","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"333f48b1107c63e992fdbe1290eeb2a7cc1d7a0c","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"41c0516f76513036e30a70509a6d33e8a79bdba2","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"1772ade171aa6bd806909d69003cfc498c3af019","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"3324e9d09faf3903bc9815358bda4000bbb691fa","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"2f4c791b5999b2e1a707bd473c1db7c21d206a27","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"ed76879122ad1b62d210522de4037808644a590d","modified":1750011960991},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1750011960991},{"_id":"themes/next/source/images/32.jpg","hash":"6fab557b6c9144b042323e61698de0f6c618d229","modified":1750014546892},{"_id":"themes/next/source/images/wechat.jpg","hash":"28468d670099fecac94c690b4418e0161431480f","modified":1750011950015},{"_id":"themes/next/source/images/mzj.jpg","hash":"4963a837669aee73d9f41dc59b2e3dde41dc7756","modified":1750011949935},{"_id":"themes/next/source/images/zhifubao.jpg","hash":"ec1fc0e5831c694813da04fefa49cde28bb6315c","modified":1750011950019},{"_id":"public/search.xml","hash":"ad7c790db03332e1bcb81e0c0bad9aadf618374c","modified":1750016753122},{"_id":"public/categories/index.html","hash":"a55c28d54186d35091bb1d9b45436d7d847c61ca","modified":1750016753122},{"_id":"public/home/index.html","hash":"0cc5040018fe9c2d8a153fd799c2365a1dce502b","modified":1750016753122},{"_id":"public/tags/index.html","hash":"4bc2efec199658e1c1341933b31ec0fbd4ba7c28","modified":1750016753122},{"_id":"public/2025/06/16/重回有感/index.html","hash":"9af3597affd743075ba319149ec897c74c59f758","modified":1750016753122},{"_id":"public/2023/12/04/算法题：找出最长回文子串/index.html","hash":"b01f59540a62dc206577087a23f9e35375f322aa","modified":1750016753122},{"_id":"public/2023/11/14/C-C-const与static关键字/index.html","hash":"d16e86893c81bcdb91dd93c0f05dc13198968a36","modified":1750016753122},{"_id":"public/2023/11/13/技术面/index.html","hash":"ff41cce127b65f5ec066d4bce4feb6eb5b0c0895","modified":1750016753122},{"_id":"public/2023/11/06/我和《长汀往事》/index.html","hash":"173e2c332eab8e8a055c5f7ccd46ef170f73dd8b","modified":1750016753122},{"_id":"public/2023/11/06/C++的进阶语法(仅语法层面)/index.html","hash":"c0e47b3ef42a63d076f3c060613474661f5658b4","modified":1750016753122},{"_id":"public/2023/11/05/测试/index.html","hash":"816c0dd5b03311264fc17c8ecca1d302a4f03789","modified":1750016753122},{"_id":"public/2023/11/01/hello-world/index.html","hash":"33e11ee9bebdbe55b7f0b83968a17d60ba1ffc47","modified":1750016753122},{"_id":"public/archives/index.html","hash":"65869cc7d51f5e2985f8e923152f9424febbeedc","modified":1750016753122},{"_id":"public/archives/2023/index.html","hash":"687132e8f3f4a38938d3bb8136b44bafa132aeb2","modified":1750016753122},{"_id":"public/archives/2023/11/index.html","hash":"50169bc9b480f8c780ac23595652c425cea98145","modified":1750016753122},{"_id":"public/archives/2023/12/index.html","hash":"b7735472b5307736c7989fab718069a9750d7029","modified":1750016753122},{"_id":"public/archives/2025/index.html","hash":"bd6134366181168c1756d578078c15d69bf037b6","modified":1750016753122},{"_id":"public/archives/2025/06/index.html","hash":"47e3985aec6cd8c51e1ab97a745099b5e69f9f4f","modified":1750016753122},{"_id":"public/categories/2023-11/index.html","hash":"10112c12bb18381c7e4d4d17691c08b1de801c06","modified":1750016753122},{"_id":"public/categories/2023-12/index.html","hash":"ed35662ec4acc0cb35e23262d842e415ceaab577","modified":1750016753122},{"_id":"public/categories/2025-6/index.html","hash":"8db352de53ea6dee12114178dc3055c9eb4ba9da","modified":1750016753122},{"_id":"public/index.html","hash":"a7b8e0ed805882501d7646d1ca7d463014ac9067","modified":1750016753122},{"_id":"public/tags/语法/index.html","hash":"10a3c29b435993adcc12cc88ea9b1cf53842d692","modified":1750016753122},{"_id":"public/tags/杂文/index.html","hash":"027288d1c0217a314b56fae73efe2fc41f9abf44","modified":1750016753122},{"_id":"public/tags/面试/index.html","hash":"e169bc3d2465b5a079d24d12e29a3541c84eab57","modified":1750016753122},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1750016753122},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1750016753122},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1750016753122},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1750016753122},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1750016753122},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1750016753122},{"_id":"public/images/32.jpg","hash":"6fab557b6c9144b042323e61698de0f6c618d229","modified":1750016753122},{"_id":"public/images/wechat.jpg","hash":"28468d670099fecac94c690b4418e0161431480f","modified":1750016753122},{"_id":"public/css/main.css","hash":"809c97d341d26b976d94a2fc461226d28fe709bd","modified":1750016753122},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1750016753122},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1750016753122},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1750016753122},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1750016753122},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1750016753122},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1750016753122},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1750016753122},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1750016753122},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1750016753122},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1750016753122},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1750016753122},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1750016753122},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1750016753122},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1750016753122},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1750016753122},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1750016753122},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1750016753122},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1750016753122},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1750016753122},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1750016753122},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1750016753122},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1750016753122},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1750016753122},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1750016753122},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1750016753122},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1750016753122},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1750016753122},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1750016753122},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1750016753122},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1750016753122},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1750016753122},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1750016753122},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1750016753122},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1750016753122},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1750016753122},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1750016753122},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1750016753122},{"_id":"public/images/mzj.jpg","hash":"4963a837669aee73d9f41dc59b2e3dde41dc7756","modified":1750016753122},{"_id":"public/images/zhifubao.jpg","hash":"ec1fc0e5831c694813da04fefa49cde28bb6315c","modified":1750016753122}],"Category":[{"name":"2023-11","_id":"cmby2si8m0004bhbl8798fzi3"},{"name":"2023-12","_id":"cmby2sib6000obhbl6qw56g3x"},{"name":"2025-6","_id":"cmby2sib7000ubhbl7tid5z4n"}],"Data":[],"Page":[{"title":"分类","date":"2023-11-05T08:46:02.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-11-05 16:46:02\ntype: \"categories\"\n---\n","updated":"2025-06-15T18:25:18.415Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmby2si870000bhblfyvhg4qc","content":"","length":0,"excerpt":"","more":""},{"title":"home","date":"2025-06-15T18:32:07.000Z","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2025-06-16 02:32:07\n---\n","updated":"2025-06-15T18:32:07.320Z","path":"home/index.html","comments":1,"layout":"page","_id":"cmby2si8i0002bhbldrjwcqcq","content":"","length":0,"excerpt":"","more":""},{"title":"标签","date":"2023-11-05T08:43:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-11-05 16:43:00\ntype: \"tags\"\n---\n","updated":"2025-06-15T18:25:18.419Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmby2si8q0006bhbl8kds874s","content":"","length":0,"excerpt":"","more":""}],"Post":[{"title":"C/C++const与static关键字","date":"2023-11-14T09:29:06.000Z","_content":"\n这一节主要给大家介绍C语言中经常令人迷惑的两个关键字const和static，考虑到大家的基础，我只在课堂上讲授最初级的内容，但是初级不等于不重要，也决不等于简单，相反，学好初级的内容在编程当中具有十分重要的意义，是各位今后理解更高级别代码的基石，希望大家对下面的内容做到精准掌握！后续，我会根据情况逐渐对这篇博客进行完善，补充一些更高级的用法和更深层次的知识，下面，让我们从内存开始——\n\n<!-- more -->\n\n## 内存布局\n\n### Windows\n\nWindows是闭源的，有版权保护，资料较少，不好深入研究每一个细节，至今仍有一些内部原理不被大家知晓。下图是一个典型的 Windows 32位程序的内存分布：\n![Windows内存分布](images/32.jpg)\n\n## const\n\n### 是这样吗？\nMe：\n但是在我int &a = f（int b）的例子中，f函数返回的也是一个临时的整数值啊，为什么绑定到临时的整形上就不会错，绑定到临时的pair上就会错呢？\nChatGPT：\n好问题！这涉及到 C++ 中的两种不同的语法和行为。\n\n在 C++ 中，绑定到临时值的非 const 引用是允许的，但有一个重要的区别：\n\n对于基本数据类型（如整数），非 const 引用可以绑定到临时值，因为整数是可修改的。\n\n对于复杂的用户定义类型（如 pair<int, int>），非 const 引用不能直接绑定到临时值。这是因为，与整数不同，pair<int, int> 是一个复杂的对象，C++ 规定不能通过非 const 引用修改临时对象，以防止悬垂引用问题。\n\n这就是为什么在你的原始代码中，当你尝试用非 const 引用绑定到 pair<int, int> 类型的临时值时，编译器报错的原因。而在 int &a = f(int b) 这种情况下，int 是一个基本数据类型，可以通过非 const 引用绑定到临时值。\n\n如果你想要修改 pair<int, int> 类型的临时值，可以使用 const 引用：\n```\ncpp\nconst auto &[l1, r1] = f(s, i, i);\nconst auto &[l2, r2] = f(s, i, i + 1);\n```\n这样就能够避免编译错误。希望这能帮助解释这个问题。\n---\n这是真的吗？？？\n","source":"_posts/C-C-const与static关键字.md","raw":"---\ntitle: C/C++const与static关键字\ndate: 2023-11-14 17:29:06\ntags:\n\t- 语法\ncategories:\n\t- 2023-11\n---\n\n这一节主要给大家介绍C语言中经常令人迷惑的两个关键字const和static，考虑到大家的基础，我只在课堂上讲授最初级的内容，但是初级不等于不重要，也决不等于简单，相反，学好初级的内容在编程当中具有十分重要的意义，是各位今后理解更高级别代码的基石，希望大家对下面的内容做到精准掌握！后续，我会根据情况逐渐对这篇博客进行完善，补充一些更高级的用法和更深层次的知识，下面，让我们从内存开始——\n\n<!-- more -->\n\n## 内存布局\n\n### Windows\n\nWindows是闭源的，有版权保护，资料较少，不好深入研究每一个细节，至今仍有一些内部原理不被大家知晓。下图是一个典型的 Windows 32位程序的内存分布：\n![Windows内存分布](images/32.jpg)\n\n## const\n\n### 是这样吗？\nMe：\n但是在我int &a = f（int b）的例子中，f函数返回的也是一个临时的整数值啊，为什么绑定到临时的整形上就不会错，绑定到临时的pair上就会错呢？\nChatGPT：\n好问题！这涉及到 C++ 中的两种不同的语法和行为。\n\n在 C++ 中，绑定到临时值的非 const 引用是允许的，但有一个重要的区别：\n\n对于基本数据类型（如整数），非 const 引用可以绑定到临时值，因为整数是可修改的。\n\n对于复杂的用户定义类型（如 pair<int, int>），非 const 引用不能直接绑定到临时值。这是因为，与整数不同，pair<int, int> 是一个复杂的对象，C++ 规定不能通过非 const 引用修改临时对象，以防止悬垂引用问题。\n\n这就是为什么在你的原始代码中，当你尝试用非 const 引用绑定到 pair<int, int> 类型的临时值时，编译器报错的原因。而在 int &a = f(int b) 这种情况下，int 是一个基本数据类型，可以通过非 const 引用绑定到临时值。\n\n如果你想要修改 pair<int, int> 类型的临时值，可以使用 const 引用：\n```\ncpp\nconst auto &[l1, r1] = f(s, i, i);\nconst auto &[l2, r2] = f(s, i, i + 1);\n```\n这样就能够避免编译错误。希望这能帮助解释这个问题。\n---\n这是真的吗？？？\n","slug":"C-C-const与static关键字","published":1,"updated":"2025-06-15T19:27:59.544Z","comments":1,"layout":"post","photos":[],"_id":"cmby2si8c0001bhbl907q695a","content":"<p>这一节主要给大家介绍C语言中经常令人迷惑的两个关键字const和static，考虑到大家的基础，我只在课堂上讲授最初级的内容，但是初级不等于不重要，也决不等于简单，相反，学好初级的内容在编程当中具有十分重要的意义，是各位今后理解更高级别代码的基石，希望大家对下面的内容做到精准掌握！后续，我会根据情况逐渐对这篇博客进行完善，补充一些更高级的用法和更深层次的知识，下面，让我们从内存开始——</p>\n<span id=\"more\"></span>\n\n<h2 id=\"内存布局\"><a href=\"#内存布局\" class=\"headerlink\" title=\"内存布局\"></a>内存布局</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>Windows是闭源的，有版权保护，资料较少，不好深入研究每一个细节，至今仍有一些内部原理不被大家知晓。下图是一个典型的 Windows 32位程序的内存分布：<br><img src=\"/images/32.jpg\" alt=\"Windows内存分布\"></p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><h3 id=\"是这样吗？\"><a href=\"#是这样吗？\" class=\"headerlink\" title=\"是这样吗？\"></a>是这样吗？</h3><p>Me：<br>但是在我int &amp;a &#x3D; f（int b）的例子中，f函数返回的也是一个临时的整数值啊，为什么绑定到临时的整形上就不会错，绑定到临时的pair上就会错呢？<br>ChatGPT：<br>好问题！这涉及到 C++ 中的两种不同的语法和行为。</p>\n<p>在 C++ 中，绑定到临时值的非 const 引用是允许的，但有一个重要的区别：</p>\n<p>对于基本数据类型（如整数），非 const 引用可以绑定到临时值，因为整数是可修改的。</p>\n<p>对于复杂的用户定义类型（如 pair&lt;int, int&gt;），非 const 引用不能直接绑定到临时值。这是因为，与整数不同，pair&lt;int, int&gt; 是一个复杂的对象，C++ 规定不能通过非 const 引用修改临时对象，以防止悬垂引用问题。</p>\n<p>这就是为什么在你的原始代码中，当你尝试用非 const 引用绑定到 pair&lt;int, int&gt; 类型的临时值时，编译器报错的原因。而在 int &amp;a &#x3D; f(int b) 这种情况下，int 是一个基本数据类型，可以通过非 const 引用绑定到临时值。</p>\n<h2 id=\"如果你想要修改-pair-类型的临时值，可以使用-const-引用：这样就能够避免编译错误。希望这能帮助解释这个问题。\"><a href=\"#如果你想要修改-pair-类型的临时值，可以使用-const-引用：这样就能够避免编译错误。希望这能帮助解释这个问题。\" class=\"headerlink\" title=\"如果你想要修改 pair&lt;int, int&gt; 类型的临时值，可以使用 const 引用：这样就能够避免编译错误。希望这能帮助解释这个问题。\"></a>如果你想要修改 pair&lt;int, int&gt; 类型的临时值，可以使用 const 引用：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp</span><br><span class=\"line\">const auto &amp;[l1, r1] = f(s, i, i);</span><br><span class=\"line\">const auto &amp;[l2, r2] = f(s, i, i + 1);</span><br></pre></td></tr></table></figure><br>这样就能够避免编译错误。希望这能帮助解释这个问题。</h2><p>这是真的吗？？？</p>\n","length":890,"excerpt":"<p>这一节主要给大家介绍C语言中经常令人迷惑的两个关键字const和static，考虑到大家的基础，我只在课堂上讲授最初级的内容，但是初级不等于不重要，也决不等于简单，相反，学好初级的内容在编程当中具有十分重要的意义，是各位今后理解更高级别代码的基石，希望大家对下面的内容做到精准掌握！后续，我会根据情况逐渐对这篇博客进行完善，补充一些更高级的用法和更深层次的知识，下面，让我们从内存开始——</p>","more":"<h2 id=\"内存布局\"><a href=\"#内存布局\" class=\"headerlink\" title=\"内存布局\"></a>内存布局</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>Windows是闭源的，有版权保护，资料较少，不好深入研究每一个细节，至今仍有一些内部原理不被大家知晓。下图是一个典型的 Windows 32位程序的内存分布：<br><img src=\"/images/32.jpg\" alt=\"Windows内存分布\"></p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><h3 id=\"是这样吗？\"><a href=\"#是这样吗？\" class=\"headerlink\" title=\"是这样吗？\"></a>是这样吗？</h3><p>Me：<br>但是在我int &amp;a &#x3D; f（int b）的例子中，f函数返回的也是一个临时的整数值啊，为什么绑定到临时的整形上就不会错，绑定到临时的pair上就会错呢？<br>ChatGPT：<br>好问题！这涉及到 C++ 中的两种不同的语法和行为。</p>\n<p>在 C++ 中，绑定到临时值的非 const 引用是允许的，但有一个重要的区别：</p>\n<p>对于基本数据类型（如整数），非 const 引用可以绑定到临时值，因为整数是可修改的。</p>\n<p>对于复杂的用户定义类型（如 pair&lt;int, int&gt;），非 const 引用不能直接绑定到临时值。这是因为，与整数不同，pair&lt;int, int&gt; 是一个复杂的对象，C++ 规定不能通过非 const 引用修改临时对象，以防止悬垂引用问题。</p>\n<p>这就是为什么在你的原始代码中，当你尝试用非 const 引用绑定到 pair&lt;int, int&gt; 类型的临时值时，编译器报错的原因。而在 int &amp;a &#x3D; f(int b) 这种情况下，int 是一个基本数据类型，可以通过非 const 引用绑定到临时值。</p>\n<h2 id=\"如果你想要修改-pair-类型的临时值，可以使用-const-引用：这样就能够避免编译错误。希望这能帮助解释这个问题。\"><a href=\"#如果你想要修改-pair-类型的临时值，可以使用-const-引用：这样就能够避免编译错误。希望这能帮助解释这个问题。\" class=\"headerlink\" title=\"如果你想要修改 pair&lt;int, int&gt; 类型的临时值，可以使用 const 引用：这样就能够避免编译错误。希望这能帮助解释这个问题。\"></a>如果你想要修改 pair&lt;int, int&gt; 类型的临时值，可以使用 const 引用：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp</span><br><span class=\"line\">const auto &amp;[l1, r1] = f(s, i, i);</span><br><span class=\"line\">const auto &amp;[l2, r2] = f(s, i, i + 1);</span><br></pre></td></tr></table></figure><br>这样就能够避免编译错误。希望这能帮助解释这个问题。</h2><p>这是真的吗？？？</p>"},{"title":"C++的进阶语法","date":"2023-11-06T13:43:31.000Z","_content":"\n最近复习一下语法，结合了以下三本工具书，记录一下有收获的点：\n- 《C++ Primer》\n- 《Effective C++》\n- 《More Effective C++》\n\n# 封装\n\n## 重载\n\n个人认为，重载是C++区别于C的三大特性（封装，继承，多态）中属于封装的重要特性之一，注意，重载（Overloading）是一种封装（Encapsulation）的概念而非多态，它允许在同一个作用域内使用相同的名称，但是参数列表不同的函数或方法。\n\n>重载 是一种封装的概念，它提供了一种通过相同的名称执行不同操作的机制，提高了函数或方法的可用性和易用性。\n多态 是面向对象编程的一个特性，它允许不同的对象对相同的消息做出不同的响应，提高了代码的灵活性和可扩展性。\n\n下面介绍一些重载的高阶用法：\n\n<!-- more -->\n\n### 转换构造函数\n\n内容略\n\n## 模板(Template)\n\n### 模板实参推断过程中的类型转换\n\n这也是指针和引用的重大区别之一！！！就是在函数模板实参推断过程中是否允许类型转换！！！\n\n### 模板的显式具体化","source":"_posts/C++的进阶语法(仅语法层面).md","raw":"---\ntitle: C++的进阶语法\ndate: 2023-11-06 21:43:31\ntags:\n\t- 语法\ncategories: \n\t- 2023-11\n---\n\n最近复习一下语法，结合了以下三本工具书，记录一下有收获的点：\n- 《C++ Primer》\n- 《Effective C++》\n- 《More Effective C++》\n\n# 封装\n\n## 重载\n\n个人认为，重载是C++区别于C的三大特性（封装，继承，多态）中属于封装的重要特性之一，注意，重载（Overloading）是一种封装（Encapsulation）的概念而非多态，它允许在同一个作用域内使用相同的名称，但是参数列表不同的函数或方法。\n\n>重载 是一种封装的概念，它提供了一种通过相同的名称执行不同操作的机制，提高了函数或方法的可用性和易用性。\n多态 是面向对象编程的一个特性，它允许不同的对象对相同的消息做出不同的响应，提高了代码的灵活性和可扩展性。\n\n下面介绍一些重载的高阶用法：\n\n<!-- more -->\n\n### 转换构造函数\n\n内容略\n\n## 模板(Template)\n\n### 模板实参推断过程中的类型转换\n\n这也是指针和引用的重大区别之一！！！就是在函数模板实参推断过程中是否允许类型转换！！！\n\n### 模板的显式具体化","slug":"C++的进阶语法(仅语法层面)","published":1,"updated":"2025-06-15T19:00:32.696Z","comments":1,"layout":"post","photos":[],"_id":"cmby2si8j0003bhblh1m895q8","content":"<p>最近复习一下语法，结合了以下三本工具书，记录一下有收获的点：</p>\n<ul>\n<li>《C++ Primer》</li>\n<li>《Effective C++》</li>\n<li>《More Effective C++》</li>\n</ul>\n<h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p>个人认为，重载是C++区别于C的三大特性（封装，继承，多态）中属于封装的重要特性之一，注意，重载（Overloading）是一种封装（Encapsulation）的概念而非多态，它允许在同一个作用域内使用相同的名称，但是参数列表不同的函数或方法。</p>\n<blockquote>\n<p>重载 是一种封装的概念，它提供了一种通过相同的名称执行不同操作的机制，提高了函数或方法的可用性和易用性。<br>多态 是面向对象编程的一个特性，它允许不同的对象对相同的消息做出不同的响应，提高了代码的灵活性和可扩展性。</p>\n</blockquote>\n<p>下面介绍一些重载的高阶用法：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"转换构造函数\"><a href=\"#转换构造函数\" class=\"headerlink\" title=\"转换构造函数\"></a>转换构造函数</h3><p>内容略</p>\n<h2 id=\"模板-Template\"><a href=\"#模板-Template\" class=\"headerlink\" title=\"模板(Template)\"></a>模板(Template)</h2><h3 id=\"模板实参推断过程中的类型转换\"><a href=\"#模板实参推断过程中的类型转换\" class=\"headerlink\" title=\"模板实参推断过程中的类型转换\"></a>模板实参推断过程中的类型转换</h3><p>这也是指针和引用的重大区别之一！！！就是在函数模板实参推断过程中是否允许类型转换！！！</p>\n<h3 id=\"模板的显式具体化\"><a href=\"#模板的显式具体化\" class=\"headerlink\" title=\"模板的显式具体化\"></a>模板的显式具体化</h3>","length":403,"excerpt":"<p>最近复习一下语法，结合了以下三本工具书，记录一下有收获的点：</p>\n<ul>\n<li>《C++ Primer》</li>\n<li>《Effective C++》</li>\n<li>《More Effective C++》</li>\n</ul>\n<h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p>个人认为，重载是C++区别于C的三大特性（封装，继承，多态）中属于封装的重要特性之一，注意，重载（Overloading）是一种封装（Encapsulation）的概念而非多态，它允许在同一个作用域内使用相同的名称，但是参数列表不同的函数或方法。</p>\n<blockquote>\n<p>重载 是一种封装的概念，它提供了一种通过相同的名称执行不同操作的机制，提高了函数或方法的可用性和易用性。<br>多态 是面向对象编程的一个特性，它允许不同的对象对相同的消息做出不同的响应，提高了代码的灵活性和可扩展性。</p>\n</blockquote>\n<p>下面介绍一些重载的高阶用法：</p>","more":"<h3 id=\"转换构造函数\"><a href=\"#转换构造函数\" class=\"headerlink\" title=\"转换构造函数\"></a>转换构造函数</h3><p>内容略</p>\n<h2 id=\"模板-Template\"><a href=\"#模板-Template\" class=\"headerlink\" title=\"模板(Template)\"></a>模板(Template)</h2><h3 id=\"模板实参推断过程中的类型转换\"><a href=\"#模板实参推断过程中的类型转换\" class=\"headerlink\" title=\"模板实参推断过程中的类型转换\"></a>模板实参推断过程中的类型转换</h3><p>这也是指针和引用的重大区别之一！！！就是在函数模板实参推断过程中是否允许类型转换！！！</p>\n<h3 id=\"模板的显式具体化\"><a href=\"#模板的显式具体化\" class=\"headerlink\" title=\"模板的显式具体化\"></a>模板的显式具体化</h3>"},{"title":"Hello World","date":"2023-11-01T13:43:31.000Z","tages":["杂文"],"_content":"兄弟们，你们的到来使我感动不已，我只能说：Welcome to 我的新家，欢迎你们常来做客！\n\n# Declaration\n\n本篇是建站以来第一篇文章，将来等文章多了他就刷到底下去了，但是一篇文章的沉底并不代表着他的消失和埋没，反而象征着这里古老的地基；有时候，网站和团队多么像啊，一篇篇文章就像团队的一个个人一样。希望将来再看到这篇文章的时候，还记得自己当时为什么出发>~<\n\n————yours ymlf","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023-11-01 21:43:31\ntages:\n\t- 杂文\ncategories:\n\t- 2023-11\n---\n兄弟们，你们的到来使我感动不已，我只能说：Welcome to 我的新家，欢迎你们常来做客！\n\n# Declaration\n\n本篇是建站以来第一篇文章，将来等文章多了他就刷到底下去了，但是一篇文章的沉底并不代表着他的消失和埋没，反而象征着这里古老的地基；有时候，网站和团队多么像啊，一篇篇文章就像团队的一个个人一样。希望将来再看到这篇文章的时候，还记得自己当时为什么出发>~<\n\n————yours ymlf","slug":"hello-world","published":1,"updated":"2025-06-15T19:03:13.335Z","comments":1,"layout":"post","photos":[],"_id":"cmby2si8r0007bhblejlm6ooq","content":"<p>兄弟们，你们的到来使我感动不已，我只能说：Welcome to 我的新家，欢迎你们常来做客！</p>\n<h1 id=\"Declaration\"><a href=\"#Declaration\" class=\"headerlink\" title=\"Declaration\"></a>Declaration</h1><p>本篇是建站以来第一篇文章，将来等文章多了他就刷到底下去了，但是一篇文章的沉底并不代表着他的消失和埋没，反而象征着这里古老的地基；有时候，网站和团队多么像啊，一篇篇文章就像团队的一个个人一样。希望将来再看到这篇文章的时候，还记得自己当时为什么出发&gt;~&lt;</p>\n<p>————yours ymlf</p>\n","length":199,"excerpt":"","more":"<p>兄弟们，你们的到来使我感动不已，我只能说：Welcome to 我的新家，欢迎你们常来做客！</p>\n<h1 id=\"Declaration\"><a href=\"#Declaration\" class=\"headerlink\" title=\"Declaration\"></a>Declaration</h1><p>本篇是建站以来第一篇文章，将来等文章多了他就刷到底下去了，但是一篇文章的沉底并不代表着他的消失和埋没，反而象征着这里古老的地基；有时候，网站和团队多么像啊，一篇篇文章就像团队的一个个人一样。希望将来再看到这篇文章的时候，还记得自己当时为什么出发&gt;~&lt;</p>\n<p>————yours ymlf</p>\n"},{"title":"我和《长汀往事》","date":"2023-11-06T13:43:40.000Z","_content":"\n## 长汀往事\n\n关于长汀的心路历程，已经在叶子老师的采访中讲述完毕了，这里就略过了，等推送出了我把链接甩上来\n\n","source":"_posts/我和《长汀往事》.md","raw":"---\ntitle: 我和《长汀往事》\ndate: 2023-11-06 21:43:40\ntags:\n\t- 杂文\ncategories:\n\t- 2023-11\n---\n\n## 长汀往事\n\n关于长汀的心路历程，已经在叶子老师的采访中讲述完毕了，这里就略过了，等推送出了我把链接甩上来\n\n","slug":"我和《长汀往事》","published":1,"updated":"2025-06-15T18:52:56.399Z","comments":1,"layout":"post","photos":[],"_id":"cmby2si8s0008bhblcjxag2gt","content":"<h2 id=\"长汀往事\"><a href=\"#长汀往事\" class=\"headerlink\" title=\"长汀往事\"></a>长汀往事</h2><p>关于长汀的心路历程，已经在叶子老师的采访中讲述完毕了，这里就略过了，等推送出了我把链接甩上来</p>\n","length":50,"excerpt":"","more":"<h2 id=\"长汀往事\"><a href=\"#长汀往事\" class=\"headerlink\" title=\"长汀往事\"></a>长汀往事</h2><p>关于长汀的心路历程，已经在叶子老师的采访中讲述完毕了，这里就略过了，等推送出了我把链接甩上来</p>\n"},{"title":"基础代码面","date":"2023-11-13T11:55:32.000Z","_content":"\n#### 实现可变长数组 ####\n\n这种问题要记住实现两版，一定不要忘了写const对象的版本\n\n<!-- more -->\n```\n#include <iostream>\nusing namespace std;\n\nclass Array{\npublic:\n    Array(int length = 0);\n    ~Array();\npublic:\n    int & operator[](int i);\n    const int & operator[](int i) const;\npublic:\n    int length() const { return m_length; }\n    void display() const;\nprivate:\n    int m_length;  //数组长度\n    int *m_p;  //指向数组内存的指针\n};\n\nArray::Array(int length): m_length(length){\n    if(length == 0){\n        m_p = NULL;\n    }else{\n        m_p = new int[length];\n    }\n}\n\nArray::~Array(){\n    delete[] m_p;\n}\n\nint& Array::operator[](int i){\n    return m_p[i];\n}\n\nconst int & Array::operator[](int i) const{\n    return m_p[i];\n}\n\nvoid Array::display() const{\n    for(int i = 0; i < m_length; i++){\n        if(i == m_length - 1){\n            cout<<m_p[i]<<endl;\n        }else{\n            cout<<m_p[i]<<\", \";\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n\n    Array A(n);\n    for(int i = 0, len = A.length(); i < len; i++){\n        A[i] = i * 5;\n    }\n    A.display();\n   \n    const Array B(n);\n    cout<<B[n-1]<<endl;  //访问最后一个元素\n   \n    return 0;\n}\n\n```\n---\n这周日争取学一下github新出的markdown神器，顺便这两篇文章中的代码高亮方法：[语雀链接（仅我可见）](https://www.yuque.com/yumulinfengfirepigreturn/yrgoyf/dtno1rcrfldrpbqe#YgwOv)","source":"_posts/技术面.md","raw":"---\ntitle: 基础代码面\ndate: 2023-11-13 19:55:32\ntags:\n    - 语法\ncategories:\n\t- 2023-11\n---\n\n#### 实现可变长数组 ####\n\n这种问题要记住实现两版，一定不要忘了写const对象的版本\n\n<!-- more -->\n```\n#include <iostream>\nusing namespace std;\n\nclass Array{\npublic:\n    Array(int length = 0);\n    ~Array();\npublic:\n    int & operator[](int i);\n    const int & operator[](int i) const;\npublic:\n    int length() const { return m_length; }\n    void display() const;\nprivate:\n    int m_length;  //数组长度\n    int *m_p;  //指向数组内存的指针\n};\n\nArray::Array(int length): m_length(length){\n    if(length == 0){\n        m_p = NULL;\n    }else{\n        m_p = new int[length];\n    }\n}\n\nArray::~Array(){\n    delete[] m_p;\n}\n\nint& Array::operator[](int i){\n    return m_p[i];\n}\n\nconst int & Array::operator[](int i) const{\n    return m_p[i];\n}\n\nvoid Array::display() const{\n    for(int i = 0; i < m_length; i++){\n        if(i == m_length - 1){\n            cout<<m_p[i]<<endl;\n        }else{\n            cout<<m_p[i]<<\", \";\n        }\n    }\n}\n\nint main(){\n    int n;\n    cin>>n;\n\n    Array A(n);\n    for(int i = 0, len = A.length(); i < len; i++){\n        A[i] = i * 5;\n    }\n    A.display();\n   \n    const Array B(n);\n    cout<<B[n-1]<<endl;  //访问最后一个元素\n   \n    return 0;\n}\n\n```\n---\n这周日争取学一下github新出的markdown神器，顺便这两篇文章中的代码高亮方法：[语雀链接（仅我可见）](https://www.yuque.com/yumulinfengfirepigreturn/yrgoyf/dtno1rcrfldrpbqe#YgwOv)","slug":"技术面","published":1,"updated":"2025-06-15T18:45:33.047Z","comments":1,"layout":"post","photos":[],"_id":"cmby2si8t0009bhbl6lyc59f1","content":"<h4 id=\"实现可变长数组\"><a href=\"#实现可变长数组\" class=\"headerlink\" title=\"实现可变长数组\"></a>实现可变长数组</h4><p>这种问题要记住实现两版，一定不要忘了写const对象的版本</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class Array&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    Array(int length = 0);</span><br><span class=\"line\">    ~Array();</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int &amp; operator[](int i);</span><br><span class=\"line\">    const int &amp; operator[](int i) const;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int length() const &#123; return m_length; &#125;</span><br><span class=\"line\">    void display() const;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int m_length;  //数组长度</span><br><span class=\"line\">    int *m_p;  //指向数组内存的指针</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Array::Array(int length): m_length(length)&#123;</span><br><span class=\"line\">    if(length == 0)&#123;</span><br><span class=\"line\">        m_p = NULL;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        m_p = new int[length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Array::~Array()&#123;</span><br><span class=\"line\">    delete[] m_p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int&amp; Array::operator[](int i)&#123;</span><br><span class=\"line\">    return m_p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const int &amp; Array::operator[](int i) const&#123;</span><br><span class=\"line\">    return m_p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Array::display() const&#123;</span><br><span class=\"line\">    for(int i = 0; i &lt; m_length; i++)&#123;</span><br><span class=\"line\">        if(i == m_length - 1)&#123;</span><br><span class=\"line\">            cout&lt;&lt;m_p[i]&lt;&lt;endl;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            cout&lt;&lt;m_p[i]&lt;&lt;&quot;, &quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\"></span><br><span class=\"line\">    Array A(n);</span><br><span class=\"line\">    for(int i = 0, len = A.length(); i &lt; len; i++)&#123;</span><br><span class=\"line\">        A[i] = i * 5;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    A.display();</span><br><span class=\"line\">   </span><br><span class=\"line\">    const Array B(n);</span><br><span class=\"line\">    cout&lt;&lt;B[n-1]&lt;&lt;endl;  //访问最后一个元素</span><br><span class=\"line\">   </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>这周日争取学一下github新出的markdown神器，顺便这两篇文章中的代码高亮方法：<a href=\"https://www.yuque.com/yumulinfengfirepigreturn/yrgoyf/dtno1rcrfldrpbqe#YgwOv\">语雀链接（仅我可见）</a></p>\n","length":1151,"excerpt":"<h4 id=\"实现可变长数组\"><a href=\"#实现可变长数组\" class=\"headerlink\" title=\"实现可变长数组\"></a>实现可变长数组</h4><p>这种问题要记住实现两版，一定不要忘了写const对象的版本</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class Array&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    Array(int length = 0);</span><br><span class=\"line\">    ~Array();</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int &amp; operator[](int i);</span><br><span class=\"line\">    const int &amp; operator[](int i) const;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int length() const &#123; return m_length; &#125;</span><br><span class=\"line\">    void display() const;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int m_length;  //数组长度</span><br><span class=\"line\">    int *m_p;  //指向数组内存的指针</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Array::Array(int length): m_length(length)&#123;</span><br><span class=\"line\">    if(length == 0)&#123;</span><br><span class=\"line\">        m_p = NULL;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        m_p = new int[length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Array::~Array()&#123;</span><br><span class=\"line\">    delete[] m_p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int&amp; Array::operator[](int i)&#123;</span><br><span class=\"line\">    return m_p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const int &amp; Array::operator[](int i) const&#123;</span><br><span class=\"line\">    return m_p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Array::display() const&#123;</span><br><span class=\"line\">    for(int i = 0; i &lt; m_length; i++)&#123;</span><br><span class=\"line\">        if(i == m_length - 1)&#123;</span><br><span class=\"line\">            cout&lt;&lt;m_p[i]&lt;&lt;endl;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            cout&lt;&lt;m_p[i]&lt;&lt;&quot;, &quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\"></span><br><span class=\"line\">    Array A(n);</span><br><span class=\"line\">    for(int i = 0, len = A.length(); i &lt; len; i++)&#123;</span><br><span class=\"line\">        A[i] = i * 5;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    A.display();</span><br><span class=\"line\">   </span><br><span class=\"line\">    const Array B(n);</span><br><span class=\"line\">    cout&lt;&lt;B[n-1]&lt;&lt;endl;  //访问最后一个元素</span><br><span class=\"line\">   </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>这周日争取学一下github新出的markdown神器，顺便这两篇文章中的代码高亮方法：<a href=\"https://www.yuque.com/yumulinfengfirepigreturn/yrgoyf/dtno1rcrfldrpbqe#YgwOv\">语雀链接（仅我可见）</a></p>"},{"title":"C && C++ 易混淆问题","date":"2023-11-05T13:43:31.000Z","_content":"\nbug太多了，哭了啊，今天又修了一天，可算把搜索功能整好了，后续打算开发一个评论功能，看有没有精力吧zzz\n\n# 字符串\n\n在C++中，`char str = \"afefa\";` 是一个不合法的语法。如果你想声明一个字符串，正确的方式是使用字符数组（C风格字符串）或者C++的`std::string`类。下面是两种合法的方式：\n\n<!-- more -->\n\n1. **使用字符数组（C风格字符串）：**\n\n```cpp\nchar str[] = \"afefa\";\n```\n\n在这种情况下，编译器会在内存中分配足够的空间来存储字符串及其结尾的空字符（'\\0'）。`str` 数组的大小将是字符串长度加上一个额外的字节来存储空字符。在这个例子中，`str` 的大小将是 6 字节（5 个字符 + 1 个空字符）。\n\n内存结构示意图（每个方框代表一个字节）：\n\n```\n+---+---+---+---+---+---+\n| a | f | e | f | a | \\0|\n+---+---+---+---+---+---+\n```\n\n值得注意的是，这种写法目前已经被GCCban了，会报warning，我个人建议写成const char str[] = \"...\"，这样更符合常量字符串的定义。\n\n2. **使用`std::string`类：**\n\n```cpp\n#include <string>\n\nstd::string str = \"afefa\";\n```\n\n使用`std::string`类时，字符串的长度和内存管理由`std::string`类自动处理，你无需担心内存结构。`std::string`类会在需要时动态分配内存以容纳字符串。","source":"_posts/测试.md","raw":"---\ntitle: C && C++ 易混淆问题\ndate: 2023-11-05 21:43:31\ntags:\n\t- 语法\ncategories: \n\t- 2023-11\n---\n\nbug太多了，哭了啊，今天又修了一天，可算把搜索功能整好了，后续打算开发一个评论功能，看有没有精力吧zzz\n\n# 字符串\n\n在C++中，`char str = \"afefa\";` 是一个不合法的语法。如果你想声明一个字符串，正确的方式是使用字符数组（C风格字符串）或者C++的`std::string`类。下面是两种合法的方式：\n\n<!-- more -->\n\n1. **使用字符数组（C风格字符串）：**\n\n```cpp\nchar str[] = \"afefa\";\n```\n\n在这种情况下，编译器会在内存中分配足够的空间来存储字符串及其结尾的空字符（'\\0'）。`str` 数组的大小将是字符串长度加上一个额外的字节来存储空字符。在这个例子中，`str` 的大小将是 6 字节（5 个字符 + 1 个空字符）。\n\n内存结构示意图（每个方框代表一个字节）：\n\n```\n+---+---+---+---+---+---+\n| a | f | e | f | a | \\0|\n+---+---+---+---+---+---+\n```\n\n值得注意的是，这种写法目前已经被GCCban了，会报warning，我个人建议写成const char str[] = \"...\"，这样更符合常量字符串的定义。\n\n2. **使用`std::string`类：**\n\n```cpp\n#include <string>\n\nstd::string str = \"afefa\";\n```\n\n使用`std::string`类时，字符串的长度和内存管理由`std::string`类自动处理，你无需担心内存结构。`std::string`类会在需要时动态分配内存以容纳字符串。","slug":"测试","published":1,"updated":"2025-06-15T18:56:04.886Z","comments":1,"layout":"post","photos":[],"_id":"cmby2sib1000dbhbl0fcpgri4","content":"<p>bug太多了，哭了啊，今天又修了一天，可算把搜索功能整好了，后续打算开发一个评论功能，看有没有精力吧zzz</p>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>在C++中，<code>char str = &quot;afefa&quot;;</code> 是一个不合法的语法。如果你想声明一个字符串，正确的方式是使用字符数组（C风格字符串）或者C++的<code>std::string</code>类。下面是两种合法的方式：</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><strong>使用字符数组（C风格字符串）：</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = <span class=\"string\">&quot;afefa&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，编译器会在内存中分配足够的空间来存储字符串及其结尾的空字符（’\\0’）。<code>str</code> 数组的大小将是字符串长度加上一个额外的字节来存储空字符。在这个例子中，<code>str</code> 的大小将是 6 字节（5 个字符 + 1 个空字符）。</p>\n<p>内存结构示意图（每个方框代表一个字节）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---+---+---+---+---+---+</span><br><span class=\"line\">| a | f | e | f | a | \\0|</span><br><span class=\"line\">+---+---+---+---+---+---+</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，这种写法目前已经被GCCban了，会报warning，我个人建议写成const char str[] &#x3D; “…”，这样更符合常量字符串的定义。</p>\n<ol start=\"2\">\n<li><strong>使用<code>std::string</code>类：</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">std::string str = <span class=\"string\">&quot;afefa&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>std::string</code>类时，字符串的长度和内存管理由<code>std::string</code>类自动处理，你无需担心内存结构。<code>std::string</code>类会在需要时动态分配内存以容纳字符串。</p>\n","length":633,"excerpt":"<p>bug太多了，哭了啊，今天又修了一天，可算把搜索功能整好了，后续打算开发一个评论功能，看有没有精力吧zzz</p>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>在C++中，<code>char str = &quot;afefa&quot;;</code> 是一个不合法的语法。如果你想声明一个字符串，正确的方式是使用字符数组（C风格字符串）或者C++的<code>std::string</code>类。下面是两种合法的方式：</p>","more":"<ol>\n<li><strong>使用字符数组（C风格字符串）：</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = <span class=\"string\">&quot;afefa&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，编译器会在内存中分配足够的空间来存储字符串及其结尾的空字符（’\\0’）。<code>str</code> 数组的大小将是字符串长度加上一个额外的字节来存储空字符。在这个例子中，<code>str</code> 的大小将是 6 字节（5 个字符 + 1 个空字符）。</p>\n<p>内存结构示意图（每个方框代表一个字节）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---+---+---+---+---+---+</span><br><span class=\"line\">| a | f | e | f | a | \\0|</span><br><span class=\"line\">+---+---+---+---+---+---+</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，这种写法目前已经被GCCban了，会报warning，我个人建议写成const char str[] &#x3D; “…”，这样更符合常量字符串的定义。</p>\n<ol start=\"2\">\n<li><strong>使用<code>std::string</code>类：</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">std::string str = <span class=\"string\">&quot;afefa&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>std::string</code>类时，字符串的长度和内存管理由<code>std::string</code>类自动处理，你无需担心内存结构。<code>std::string</code>类会在需要时动态分配内存以容纳字符串。</p>"},{"title":"算法题：找出最长回文子串","date":"2023-12-04T11:39:16.000Z","_content":"\n今天刷到一道很经典的算法题：找出字符串的最长回文子串，常见的思路是中心扩散，算法是dp，但是题解中有两个十分优秀的算法，特作记录\n\n<!-- more -->\n\n### 算法一：暴力(O(n^2))(TLE)\n```\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        string ans = \"\";\n        int n_max = 0;\n        for(int i = 0; i < s.size(); ++i){\n            int n = 1;\n            string res(1, s[i]);\n            for(int j = 1; ; ++j){\n                if(i - j < 0 || i + j >= s.size() || s[i - j] != s[i + j]){\n                    break;\n                }\n                else{\n                    n += 2;\n                    res = s[i - j] + res + s[i + j];\n                    // cout << i << ' ' << res << endl;\n                }\n            }\n            if(n > n_max){\n                n_max = n;\n                ans = res;\n            }\n        }\n        for(int i = 0; i < s.size(); ++i){\n            int n = 1;\n            string res = \"\";\n            for(int j = 0; ; j ++){\n                if(i - j < 0 || i + j + 1 >= s.size() || s[i - j] != s[i + j + 1]){\n                    break;\n                }\n                else{\n                    n += 2;\n                    res = s[i - j] + res + s[i + 1 + j];\n                }\n            }\n            if(n > n_max){\n                n_max = n;\n                ans = res;\n            }\n        }\n        return ans;\n    }\n};\n```\n### 算法二：DP(O(n^2)) \n```\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if (n < 2) {\n            return s;\n        }\n\n        int maxLen = 1;\n        int begin = 0;\n        // dp[i][j] 表示 s[i..j] 是否是回文串\n        vector<vector<int>> dp(n, vector<int>(n));\n        // 初始化：所有长度为 1 的子串都是回文串\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n        // 递推开始\n        // 先枚举子串长度\n        for (int L = 2; L <= n; L++) {\n            // 枚举左边界，左边界的上限设置可以宽松一些\n            for (int i = 0; i < n; i++) {\n                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得\n                int j = L + i - 1;\n                // 如果右边界越界，就可以退出当前循环\n                if (j >= n) {\n                    break;\n                }\n\n                if (s[i] != s[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i < 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n\n                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置\n                if (dp[i][j] && j - i + 1 > maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substr(begin, maxLen);\n    }\n};\n\n// 真-中心扩散\nclass Solution {\npublic:\n    pair <int, int> f(const string& s, int l, int r){\n        while(l >= 0 && r < s.size() && s[l] == s[r]){\n            l --;\n            r ++;\n        }\n        return {l + 1, r - 1};\n    }\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if(n < 1){\n            return \"\";\n        }\n        int st = 0, ed = 0;\n        for(int i = 0; i < n; ++i){\n            const auto &[l1, r1] = f(s, i, i);\n            const auto &[l2, r2] = f(s, i, i + 1);\n            cout << i << ' ' << l1 << ' ' << r1 << ' ' << l2 << ' ' << r2 << endl;\n            // auto [l1, r1] = f(s, i, i);\n            // auto [l2, r2] = f(s, i, i + 1);\n            if((r1 - l1 + 1) > (ed - st + 1)){\n                st = l1;\n                ed = r1;\n            }\n            if(r2 - l2 + 1 > ed - st + 1){\n                st = l2;\n                ed = r2;\n            }\n        }\n        return s.substr(st, ed - st + 1);\n    }\n};\n```\n算法一二的复杂度一样，但是算法二返回下标而算法一返回字串，这可能是二者时间的差距所在。\n### 算法三：倒序求交集\n```\nclass Solution {\n    public String longestPalindrome(String s) {\n\n        int length = s.length();\n        String maxStr=\"\";\n        String reverse=new StringBuffer(s).reverse().toString();\n\n        int x=0;\n        int y=1;\n        while (x<length&&y<=length){\n            String substring = s.substring(x, y);\n            if (reverse.contains(substring)){\n                if(substring.equals(new StringBuffer(substring).reverse().toString()))\n                if (substring.length()>maxStr.length()){\n                    maxStr=substring;\n                }\n                y++;\n            }else {\n                x++;\n                y=x+1;\n            }\n        }\n\n        return maxStr;\n    }\n}\n```\n### 算法四：Manacher算法(O(n))\n详见：[https://leetcode.cn/problems/longest-palindromic-substring/solutions/255195/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/](leetcode官方题解)","source":"_posts/算法题：找出最长回文子串.md","raw":"---\ntitle: 算法题：找出最长回文子串\ndate: 2023-12-04 19:39:16\ntags:\n\t- 面试\ncategories:\n\t- 2023-12\n---\n\n今天刷到一道很经典的算法题：找出字符串的最长回文子串，常见的思路是中心扩散，算法是dp，但是题解中有两个十分优秀的算法，特作记录\n\n<!-- more -->\n\n### 算法一：暴力(O(n^2))(TLE)\n```\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        string ans = \"\";\n        int n_max = 0;\n        for(int i = 0; i < s.size(); ++i){\n            int n = 1;\n            string res(1, s[i]);\n            for(int j = 1; ; ++j){\n                if(i - j < 0 || i + j >= s.size() || s[i - j] != s[i + j]){\n                    break;\n                }\n                else{\n                    n += 2;\n                    res = s[i - j] + res + s[i + j];\n                    // cout << i << ' ' << res << endl;\n                }\n            }\n            if(n > n_max){\n                n_max = n;\n                ans = res;\n            }\n        }\n        for(int i = 0; i < s.size(); ++i){\n            int n = 1;\n            string res = \"\";\n            for(int j = 0; ; j ++){\n                if(i - j < 0 || i + j + 1 >= s.size() || s[i - j] != s[i + j + 1]){\n                    break;\n                }\n                else{\n                    n += 2;\n                    res = s[i - j] + res + s[i + 1 + j];\n                }\n            }\n            if(n > n_max){\n                n_max = n;\n                ans = res;\n            }\n        }\n        return ans;\n    }\n};\n```\n### 算法二：DP(O(n^2)) \n```\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if (n < 2) {\n            return s;\n        }\n\n        int maxLen = 1;\n        int begin = 0;\n        // dp[i][j] 表示 s[i..j] 是否是回文串\n        vector<vector<int>> dp(n, vector<int>(n));\n        // 初始化：所有长度为 1 的子串都是回文串\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n        // 递推开始\n        // 先枚举子串长度\n        for (int L = 2; L <= n; L++) {\n            // 枚举左边界，左边界的上限设置可以宽松一些\n            for (int i = 0; i < n; i++) {\n                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得\n                int j = L + i - 1;\n                // 如果右边界越界，就可以退出当前循环\n                if (j >= n) {\n                    break;\n                }\n\n                if (s[i] != s[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i < 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n\n                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置\n                if (dp[i][j] && j - i + 1 > maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substr(begin, maxLen);\n    }\n};\n\n// 真-中心扩散\nclass Solution {\npublic:\n    pair <int, int> f(const string& s, int l, int r){\n        while(l >= 0 && r < s.size() && s[l] == s[r]){\n            l --;\n            r ++;\n        }\n        return {l + 1, r - 1};\n    }\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if(n < 1){\n            return \"\";\n        }\n        int st = 0, ed = 0;\n        for(int i = 0; i < n; ++i){\n            const auto &[l1, r1] = f(s, i, i);\n            const auto &[l2, r2] = f(s, i, i + 1);\n            cout << i << ' ' << l1 << ' ' << r1 << ' ' << l2 << ' ' << r2 << endl;\n            // auto [l1, r1] = f(s, i, i);\n            // auto [l2, r2] = f(s, i, i + 1);\n            if((r1 - l1 + 1) > (ed - st + 1)){\n                st = l1;\n                ed = r1;\n            }\n            if(r2 - l2 + 1 > ed - st + 1){\n                st = l2;\n                ed = r2;\n            }\n        }\n        return s.substr(st, ed - st + 1);\n    }\n};\n```\n算法一二的复杂度一样，但是算法二返回下标而算法一返回字串，这可能是二者时间的差距所在。\n### 算法三：倒序求交集\n```\nclass Solution {\n    public String longestPalindrome(String s) {\n\n        int length = s.length();\n        String maxStr=\"\";\n        String reverse=new StringBuffer(s).reverse().toString();\n\n        int x=0;\n        int y=1;\n        while (x<length&&y<=length){\n            String substring = s.substring(x, y);\n            if (reverse.contains(substring)){\n                if(substring.equals(new StringBuffer(substring).reverse().toString()))\n                if (substring.length()>maxStr.length()){\n                    maxStr=substring;\n                }\n                y++;\n            }else {\n                x++;\n                y=x+1;\n            }\n        }\n\n        return maxStr;\n    }\n}\n```\n### 算法四：Manacher算法(O(n))\n详见：[https://leetcode.cn/problems/longest-palindromic-substring/solutions/255195/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/](leetcode官方题解)","slug":"算法题：找出最长回文子串","published":1,"updated":"2025-06-15T18:56:16.574Z","comments":1,"layout":"post","photos":[],"_id":"cmby2sib2000fbhblgfak5xz7","content":"<p>今天刷到一道很经典的算法题：找出字符串的最长回文子串，常见的思路是中心扩散，算法是dp，但是题解中有两个十分优秀的算法，特作记录</p>\n<span id=\"more\"></span>\n\n<h3 id=\"算法一：暴力-O-n-2-TLE\"><a href=\"#算法一：暴力-O-n-2-TLE\" class=\"headerlink\" title=\"算法一：暴力(O(n^2))(TLE)\"></a>算法一：暴力(O(n^2))(TLE)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string longestPalindrome(string s) &#123;</span><br><span class=\"line\">        string ans = &quot;&quot;;</span><br><span class=\"line\">        int n_max = 0;</span><br><span class=\"line\">        for(int i = 0; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            int n = 1;</span><br><span class=\"line\">            string res(1, s[i]);</span><br><span class=\"line\">            for(int j = 1; ; ++j)&#123;</span><br><span class=\"line\">                if(i - j &lt; 0 || i + j &gt;= s.size() || s[i - j] != s[i + j])&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else&#123;</span><br><span class=\"line\">                    n += 2;</span><br><span class=\"line\">                    res = s[i - j] + res + s[i + j];</span><br><span class=\"line\">                    // cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(n &gt; n_max)&#123;</span><br><span class=\"line\">                n_max = n;</span><br><span class=\"line\">                ans = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = 0; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            int n = 1;</span><br><span class=\"line\">            string res = &quot;&quot;;</span><br><span class=\"line\">            for(int j = 0; ; j ++)&#123;</span><br><span class=\"line\">                if(i - j &lt; 0 || i + j + 1 &gt;= s.size() || s[i - j] != s[i + j + 1])&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else&#123;</span><br><span class=\"line\">                    n += 2;</span><br><span class=\"line\">                    res = s[i - j] + res + s[i + 1 + j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(n &gt; n_max)&#123;</span><br><span class=\"line\">                n_max = n;</span><br><span class=\"line\">                ans = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法二：DP-O-n-2\"><a href=\"#算法二：DP-O-n-2\" class=\"headerlink\" title=\"算法二：DP(O(n^2))\"></a>算法二：DP(O(n^2))</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string longestPalindrome(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n &lt; 2) &#123;</span><br><span class=\"line\">            return s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int maxLen = 1;</span><br><span class=\"line\">        int begin = 0;</span><br><span class=\"line\">        // dp[i][j] 表示 s[i..j] 是否是回文串</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));</span><br><span class=\"line\">        // 初始化：所有长度为 1 的子串都是回文串</span><br><span class=\"line\">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            dp[i][i] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 递推开始</span><br><span class=\"line\">        // 先枚举子串长度</span><br><span class=\"line\">        for (int L = 2; L &lt;= n; L++) &#123;</span><br><span class=\"line\">            // 枚举左边界，左边界的上限设置可以宽松一些</span><br><span class=\"line\">            for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span><br><span class=\"line\">                int j = L + i - 1;</span><br><span class=\"line\">                // 如果右边界越界，就可以退出当前循环</span><br><span class=\"line\">                if (j &gt;= n) &#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (s[i] != s[j]) &#123;</span><br><span class=\"line\">                    dp[i][j] = false;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    if (j - i &lt; 3) &#123;</span><br><span class=\"line\">                        dp[i][j] = true;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        dp[i][j] = dp[i + 1][j - 1];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置</span><br><span class=\"line\">                if (dp[i][j] &amp;&amp; j - i + 1 &gt; maxLen) &#123;</span><br><span class=\"line\">                    maxLen = j - i + 1;</span><br><span class=\"line\">                    begin = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return s.substr(begin, maxLen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 真-中心扩散</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    pair &lt;int, int&gt; f(const string&amp; s, int l, int r)&#123;</span><br><span class=\"line\">        while(l &gt;= 0 &amp;&amp; r &lt; s.size() &amp;&amp; s[l] == s[r])&#123;</span><br><span class=\"line\">            l --;</span><br><span class=\"line\">            r ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &#123;l + 1, r - 1&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    string longestPalindrome(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if(n &lt; 1)&#123;</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int st = 0, ed = 0;</span><br><span class=\"line\">        for(int i = 0; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            const auto &amp;[l1, r1] = f(s, i, i);</span><br><span class=\"line\">            const auto &amp;[l2, r2] = f(s, i, i + 1);</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; l1 &lt;&lt; &#x27; &#x27; &lt;&lt; r1 &lt;&lt; &#x27; &#x27; &lt;&lt; l2 &lt;&lt; &#x27; &#x27; &lt;&lt; r2 &lt;&lt; endl;</span><br><span class=\"line\">            // auto [l1, r1] = f(s, i, i);</span><br><span class=\"line\">            // auto [l2, r2] = f(s, i, i + 1);</span><br><span class=\"line\">            if((r1 - l1 + 1) &gt; (ed - st + 1))&#123;</span><br><span class=\"line\">                st = l1;</span><br><span class=\"line\">                ed = r1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(r2 - l2 + 1 &gt; ed - st + 1)&#123;</span><br><span class=\"line\">                st = l2;</span><br><span class=\"line\">                ed = r2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return s.substr(st, ed - st + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>算法一二的复杂度一样，但是算法二返回下标而算法一返回字串，这可能是二者时间的差距所在。</p>\n<h3 id=\"算法三：倒序求交集\"><a href=\"#算法三：倒序求交集\" class=\"headerlink\" title=\"算法三：倒序求交集\"></a>算法三：倒序求交集</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestPalindrome(String s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        int length = s.length();</span><br><span class=\"line\">        String maxStr=&quot;&quot;;</span><br><span class=\"line\">        String reverse=new StringBuffer(s).reverse().toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        int x=0;</span><br><span class=\"line\">        int y=1;</span><br><span class=\"line\">        while (x&lt;length&amp;&amp;y&lt;=length)&#123;</span><br><span class=\"line\">            String substring = s.substring(x, y);</span><br><span class=\"line\">            if (reverse.contains(substring))&#123;</span><br><span class=\"line\">                if(substring.equals(new StringBuffer(substring).reverse().toString()))</span><br><span class=\"line\">                if (substring.length()&gt;maxStr.length())&#123;</span><br><span class=\"line\">                    maxStr=substring;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                y++;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                x++;</span><br><span class=\"line\">                y=x+1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return maxStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法四：Manacher算法-O-n\"><a href=\"#算法四：Manacher算法-O-n\" class=\"headerlink\" title=\"算法四：Manacher算法(O(n))\"></a>算法四：Manacher算法(O(n))</h3><p>详见：<a href=\"leetcode%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3\">https://leetcode.cn/problems/longest-palindromic-substring/solutions/255195/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/</a></p>\n","length":3345,"excerpt":"<p>今天刷到一道很经典的算法题：找出字符串的最长回文子串，常见的思路是中心扩散，算法是dp，但是题解中有两个十分优秀的算法，特作记录</p>","more":"<h3 id=\"算法一：暴力-O-n-2-TLE\"><a href=\"#算法一：暴力-O-n-2-TLE\" class=\"headerlink\" title=\"算法一：暴力(O(n^2))(TLE)\"></a>算法一：暴力(O(n^2))(TLE)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string longestPalindrome(string s) &#123;</span><br><span class=\"line\">        string ans = &quot;&quot;;</span><br><span class=\"line\">        int n_max = 0;</span><br><span class=\"line\">        for(int i = 0; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            int n = 1;</span><br><span class=\"line\">            string res(1, s[i]);</span><br><span class=\"line\">            for(int j = 1; ; ++j)&#123;</span><br><span class=\"line\">                if(i - j &lt; 0 || i + j &gt;= s.size() || s[i - j] != s[i + j])&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else&#123;</span><br><span class=\"line\">                    n += 2;</span><br><span class=\"line\">                    res = s[i - j] + res + s[i + j];</span><br><span class=\"line\">                    // cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(n &gt; n_max)&#123;</span><br><span class=\"line\">                n_max = n;</span><br><span class=\"line\">                ans = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = 0; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            int n = 1;</span><br><span class=\"line\">            string res = &quot;&quot;;</span><br><span class=\"line\">            for(int j = 0; ; j ++)&#123;</span><br><span class=\"line\">                if(i - j &lt; 0 || i + j + 1 &gt;= s.size() || s[i - j] != s[i + j + 1])&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else&#123;</span><br><span class=\"line\">                    n += 2;</span><br><span class=\"line\">                    res = s[i - j] + res + s[i + 1 + j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(n &gt; n_max)&#123;</span><br><span class=\"line\">                n_max = n;</span><br><span class=\"line\">                ans = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法二：DP-O-n-2\"><a href=\"#算法二：DP-O-n-2\" class=\"headerlink\" title=\"算法二：DP(O(n^2))\"></a>算法二：DP(O(n^2))</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string longestPalindrome(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n &lt; 2) &#123;</span><br><span class=\"line\">            return s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int maxLen = 1;</span><br><span class=\"line\">        int begin = 0;</span><br><span class=\"line\">        // dp[i][j] 表示 s[i..j] 是否是回文串</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));</span><br><span class=\"line\">        // 初始化：所有长度为 1 的子串都是回文串</span><br><span class=\"line\">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            dp[i][i] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 递推开始</span><br><span class=\"line\">        // 先枚举子串长度</span><br><span class=\"line\">        for (int L = 2; L &lt;= n; L++) &#123;</span><br><span class=\"line\">            // 枚举左边界，左边界的上限设置可以宽松一些</span><br><span class=\"line\">            for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span><br><span class=\"line\">                int j = L + i - 1;</span><br><span class=\"line\">                // 如果右边界越界，就可以退出当前循环</span><br><span class=\"line\">                if (j &gt;= n) &#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (s[i] != s[j]) &#123;</span><br><span class=\"line\">                    dp[i][j] = false;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    if (j - i &lt; 3) &#123;</span><br><span class=\"line\">                        dp[i][j] = true;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        dp[i][j] = dp[i + 1][j - 1];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置</span><br><span class=\"line\">                if (dp[i][j] &amp;&amp; j - i + 1 &gt; maxLen) &#123;</span><br><span class=\"line\">                    maxLen = j - i + 1;</span><br><span class=\"line\">                    begin = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return s.substr(begin, maxLen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 真-中心扩散</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    pair &lt;int, int&gt; f(const string&amp; s, int l, int r)&#123;</span><br><span class=\"line\">        while(l &gt;= 0 &amp;&amp; r &lt; s.size() &amp;&amp; s[l] == s[r])&#123;</span><br><span class=\"line\">            l --;</span><br><span class=\"line\">            r ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &#123;l + 1, r - 1&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    string longestPalindrome(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if(n &lt; 1)&#123;</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int st = 0, ed = 0;</span><br><span class=\"line\">        for(int i = 0; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            const auto &amp;[l1, r1] = f(s, i, i);</span><br><span class=\"line\">            const auto &amp;[l2, r2] = f(s, i, i + 1);</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; l1 &lt;&lt; &#x27; &#x27; &lt;&lt; r1 &lt;&lt; &#x27; &#x27; &lt;&lt; l2 &lt;&lt; &#x27; &#x27; &lt;&lt; r2 &lt;&lt; endl;</span><br><span class=\"line\">            // auto [l1, r1] = f(s, i, i);</span><br><span class=\"line\">            // auto [l2, r2] = f(s, i, i + 1);</span><br><span class=\"line\">            if((r1 - l1 + 1) &gt; (ed - st + 1))&#123;</span><br><span class=\"line\">                st = l1;</span><br><span class=\"line\">                ed = r1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(r2 - l2 + 1 &gt; ed - st + 1)&#123;</span><br><span class=\"line\">                st = l2;</span><br><span class=\"line\">                ed = r2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return s.substr(st, ed - st + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>算法一二的复杂度一样，但是算法二返回下标而算法一返回字串，这可能是二者时间的差距所在。</p>\n<h3 id=\"算法三：倒序求交集\"><a href=\"#算法三：倒序求交集\" class=\"headerlink\" title=\"算法三：倒序求交集\"></a>算法三：倒序求交集</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestPalindrome(String s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        int length = s.length();</span><br><span class=\"line\">        String maxStr=&quot;&quot;;</span><br><span class=\"line\">        String reverse=new StringBuffer(s).reverse().toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        int x=0;</span><br><span class=\"line\">        int y=1;</span><br><span class=\"line\">        while (x&lt;length&amp;&amp;y&lt;=length)&#123;</span><br><span class=\"line\">            String substring = s.substring(x, y);</span><br><span class=\"line\">            if (reverse.contains(substring))&#123;</span><br><span class=\"line\">                if(substring.equals(new StringBuffer(substring).reverse().toString()))</span><br><span class=\"line\">                if (substring.length()&gt;maxStr.length())&#123;</span><br><span class=\"line\">                    maxStr=substring;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                y++;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                x++;</span><br><span class=\"line\">                y=x+1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return maxStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法四：Manacher算法-O-n\"><a href=\"#算法四：Manacher算法-O-n\" class=\"headerlink\" title=\"算法四：Manacher算法(O(n))\"></a>算法四：Manacher算法(O(n))</h3><p>详见：<a href=\"leetcode%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3\">https://leetcode.cn/problems/longest-palindromic-substring/solutions/255195/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/</a></p>"},{"title":"重回有感","date":"2025-06-15T19:37:02.000Z","_content":"\n一晃已经一年半了，昨天重新来访旧站，感触良多，看着破败不堪的小站，看着那些笨拙的特效，刺眼的bug，七扭八歪的文字，一时哭笑不得。但我确信这是我蹒跚学步时的来时路，我不忍那些青葱岁月就这样消逝在苍茫的互联网大海中，于是我花了一小时认真地修改了那些当时令我头疼的所有bug，并写下了这篇重回有感，的确，现在共享云文档的发展几乎淹没了博客作为主流技术传播渠道而存在的空间，但我想这些千篇一律的高效框架却永远也无法抹煞博客作为个人性格展现而存在的价值，所以，我回来了！当年那些曾经关注这个网站的朋友们，别来无恙！\n\n今后这个博客可能不会主要去更新技术和科研了，更多的是一些杂文和反思，希望我们仍然能够有缘千里来相逢！\n","source":"_posts/重回有感.md","raw":"---\ntitle: 重回有感\ndate: 2025-06-16 03:37:02\ntags:\n    - 杂文\ncategories:\n    - 2025-6\n---\n\n一晃已经一年半了，昨天重新来访旧站，感触良多，看着破败不堪的小站，看着那些笨拙的特效，刺眼的bug，七扭八歪的文字，一时哭笑不得。但我确信这是我蹒跚学步时的来时路，我不忍那些青葱岁月就这样消逝在苍茫的互联网大海中，于是我花了一小时认真地修改了那些当时令我头疼的所有bug，并写下了这篇重回有感，的确，现在共享云文档的发展几乎淹没了博客作为主流技术传播渠道而存在的空间，但我想这些千篇一律的高效框架却永远也无法抹煞博客作为个人性格展现而存在的价值，所以，我回来了！当年那些曾经关注这个网站的朋友们，别来无恙！\n\n今后这个博客可能不会主要去更新技术和科研了，更多的是一些杂文和反思，希望我们仍然能够有缘千里来相逢！\n","slug":"重回有感","published":1,"updated":"2025-06-15T19:45:38.609Z","comments":1,"layout":"post","photos":[],"_id":"cmby2sib4000kbhbl81k8b54p","content":"<p>一晃已经一年半了，昨天重新来访旧站，感触良多，看着破败不堪的小站，看着那些笨拙的特效，刺眼的bug，七扭八歪的文字，一时哭笑不得。但我确信这是我蹒跚学步时的来时路，我不忍那些青葱岁月就这样消逝在苍茫的互联网大海中，于是我花了一小时认真地修改了那些当时令我头疼的所有bug，并写下了这篇重回有感，的确，现在共享云文档的发展几乎淹没了博客作为主流技术传播渠道而存在的空间，但我想这些千篇一律的高效框架却永远也无法抹煞博客作为个人性格展现而存在的价值，所以，我回来了！当年那些曾经关注这个网站的朋友们，别来无恙！</p>\n<p>今后这个博客可能不会主要去更新技术和科研了，更多的是一些杂文和反思，希望我们仍然能够有缘千里来相逢！</p>\n","length":303,"excerpt":"","more":"<p>一晃已经一年半了，昨天重新来访旧站，感触良多，看着破败不堪的小站，看着那些笨拙的特效，刺眼的bug，七扭八歪的文字，一时哭笑不得。但我确信这是我蹒跚学步时的来时路，我不忍那些青葱岁月就这样消逝在苍茫的互联网大海中，于是我花了一小时认真地修改了那些当时令我头疼的所有bug，并写下了这篇重回有感，的确，现在共享云文档的发展几乎淹没了博客作为主流技术传播渠道而存在的空间，但我想这些千篇一律的高效框架却永远也无法抹煞博客作为个人性格展现而存在的价值，所以，我回来了！当年那些曾经关注这个网站的朋友们，别来无恙！</p>\n<p>今后这个博客可能不会主要去更新技术和科研了，更多的是一些杂文和反思，希望我们仍然能够有缘千里来相逢！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmby2si8s0008bhblcjxag2gt","category_id":"cmby2si8m0004bhbl8798fzi3","_id":"cmby2sib3000gbhblehufb633"},{"post_id":"cmby2si8c0001bhbl907q695a","category_id":"cmby2si8m0004bhbl8798fzi3","_id":"cmby2sib5000lbhblek0q1n9z"},{"post_id":"cmby2si8t0009bhbl6lyc59f1","category_id":"cmby2si8m0004bhbl8798fzi3","_id":"cmby2sib5000nbhbl23fs3cyq"},{"post_id":"cmby2sib1000dbhbl0fcpgri4","category_id":"cmby2si8m0004bhbl8798fzi3","_id":"cmby2sib6000rbhbl3y1faksl"},{"post_id":"cmby2si8j0003bhblh1m895q8","category_id":"cmby2si8m0004bhbl8798fzi3","_id":"cmby2sib7000tbhbl39i06w2f"},{"post_id":"cmby2si8r0007bhblejlm6ooq","category_id":"cmby2si8m0004bhbl8798fzi3","_id":"cmby2sib7000vbhblf2q3cgil"},{"post_id":"cmby2sib2000fbhblgfak5xz7","category_id":"cmby2sib6000obhbl6qw56g3x","_id":"cmby2sib8000xbhblah2ea3ci"},{"post_id":"cmby2sib4000kbhbl81k8b54p","category_id":"cmby2sib7000ubhbl7tid5z4n","_id":"cmby2sib8000ybhbl93xvh87v"}],"PostTag":[{"post_id":"cmby2si8c0001bhbl907q695a","tag_id":"cmby2si8p0005bhblcgewgvrc","_id":"cmby2sib1000cbhbl08yu7om4"},{"post_id":"cmby2si8t0009bhbl6lyc59f1","tag_id":"cmby2si8p0005bhblcgewgvrc","_id":"cmby2sib2000ebhblh5j61qkh"},{"post_id":"cmby2sib1000dbhbl0fcpgri4","tag_id":"cmby2si8p0005bhblcgewgvrc","_id":"cmby2sib4000jbhbl067kbr3u"},{"post_id":"cmby2si8j0003bhblh1m895q8","tag_id":"cmby2si8p0005bhblcgewgvrc","_id":"cmby2sib5000mbhbl59yehzg4"},{"post_id":"cmby2sib4000kbhbl81k8b54p","tag_id":"cmby2sib3000ibhbl6aym83mh","_id":"cmby2sib6000qbhblf860868e"},{"post_id":"cmby2si8s0008bhblcjxag2gt","tag_id":"cmby2sib3000ibhbl6aym83mh","_id":"cmby2sib7000sbhblba0z7d24"},{"post_id":"cmby2sib2000fbhblgfak5xz7","tag_id":"cmby2sib6000pbhbldi3f6rng","_id":"cmby2sib7000wbhbl1c0o4t1t"}],"Tag":[{"name":"语法","_id":"cmby2si8p0005bhblcgewgvrc"},{"name":"杂文","_id":"cmby2sib3000ibhbl6aym83mh"},{"name":"面试","_id":"cmby2sib6000pbhbldi3f6rng"}]}}